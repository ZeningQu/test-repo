'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _enzyme = require('enzyme');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /* eslint-disable require-jsdoc */


_expect2.default.extend((0, _index2.default)());

describe('expect-enzyme', function () {
  var element = void 0;

  beforeEach(function () {
    var value = { enabled: true };
    element = (0, _enzyme.shallow)(_react2.default.createElement(
      'div',
      { attr: 'value', value: value },
      'children'
    ));
  });

  it('adds enzyme assertion methods', function () {
    (0, _expect2.default)((0, _expect2.default)().toHaveProps).toBeA(Function);
    (0, _expect2.default)((0, _expect2.default)().toHaveProp).toBeA(Function);
  });

  describe('toHaveProps()', function () {
    var createAssertion = function createAssertion(props) {
      var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : element;
      return function () {
        (0, _expect2.default)(el).toHaveProps(props);
      };
    };

    it('returns the context', function () {
      var expectation = (0, _expect2.default)(element);
      var result = expectation.toHaveProps({});

      (0, _expect2.default)(result).toBe(expectation);
    });

    it('throws if no props are given', function () {
      (0, _expect2.default)(createAssertion()).toThrow(/props object/i);
      (0, _expect2.default)(createAssertion(undefined)).toThrow(/props object/i);
      (0, _expect2.default)(createAssertion(null)).toThrow(/props object/i);
      (0, _expect2.default)(createAssertion(5)).toThrow(/props object/i);
      (0, _expect2.default)(createAssertion('string')).toThrow(/props object/i);

      (0, _expect2.default)(createAssertion({})).toNotThrow();
    });

    it('throws if actual is not an enzyme wrapper', function () {
      (0, _expect2.default)(createAssertion({}, 5)).toThrow(/enzyme wrapper/i);
      (0, _expect2.default)(createAssertion({}, 'string')).toThrow(/enzyme wrapper/i);
      (0, _expect2.default)(createAssertion({}, null)).toThrow(/enzyme wrapper/i);

      (0, _expect2.default)(createAssertion({}, element)).toNotThrow();
    });

    it('throws if missing props', function () {
      var assertion = createAssertion({
        someProperty: 'too late to think'
      });

      (0, _expect2.default)(assertion).toThrow(/someProperty/);
    });

    it('throws if props do not match', function () {
      var assertion = createAssertion({
        attr: 'some other value'
      });

      (0, _expect2.default)(assertion).toThrow();
    });

    it('does not throw if all props are equal', function () {
      var assertion = createAssertion({
        attr: 'value'
      });

      (0, _expect2.default)(assertion).toNotThrow();
    });
  });

  describe('toNotHaveProps()', function () {
    var element = (0, _enzyme.shallow)(_react2.default.createElement('button', { disabled: true }));

    it('throws if any value matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveProps({
          missing: 'intentionally so',
          disabled: true
        });
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('does not throw if all props are missing', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveProps({
          pool: 'closed',
          clowns: 10
        });
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });
  });

  describe('toHaveProp()', function () {
    var createAssertion = function createAssertion(prop, val) {
      return function () {
        (0, _expect2.default)(element).toHaveProp(prop, val);
      };
    };

    it('throws if the component is missing the prop', function () {
      var assertion = createAssertion('weird prop');

      (0, _expect2.default)(assertion).toThrow(/Expected div to have prop/i);
    });

    it('does not throw if the prop exists', function () {
      var assertion = createAssertion('attr');

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if the value does not match', function () {
      var assertion = createAssertion('attr', 'different value');

      (0, _expect2.default)(assertion).toThrow(/property "attr"/i);
    });

    it('checks by equality, not reference', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveProp('value', {
          enabled: true
        });
      };

      (0, _expect2.default)(assertion).toNotThrow(/prop/i);
    });

    it('adds the constructor name for objects', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveProp('value', {});
      };

      (0, _expect2.default)(assertion).toThrow(/Object {...}/);
    });

    it('returns the expectation context', function () {
      var expectation = (0, _expect2.default)(element);
      var result = expectation.toHaveProp('attr');

      (0, _expect2.default)(result).toBe(expectation);
    });

    it('throws if actual is not an enzyme wrapper', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(5).toHaveProp('stuff');
      };

      (0, _expect2.default)(assertion).toThrow(/enzyme wrapper/i);
    });

    it('shows a diff', function () {
      try {
        (0, _expect2.default)(element).toHaveProp('attr', true);
        throw new Error('Made it past');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/past/);
        (0, _expect2.default)(error.expected).toEqual({ attr: true });
        (0, _expect2.default)(error.actual).toEqual({ attr: element.prop('attr') });
      }
    });
  });

  describe('toNotHaveProp()', function () {
    var element = (0, _enzyme.shallow)(_react2.default.createElement('div', {
      disabled: true,
      value: 'offline',
      status: {
        eating: 'pizza'
      }
    }));

    it('throws if the prop exists', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveProp('disabled');
      };

      (0, _expect2.default)(assertion).toThrow(/disabled/);
    });

    it('does not throw if the prop is missing', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveProp('potato');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if the content matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveProp('status', {
          eating: 'pizza'
        });
      };

      (0, _expect2.default)(assertion).toThrow(/prop/i);
    });

    it('does not throw if the value is different', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveProp('value', 'no');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if the value matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveProp('value', 'offline');
      };

      (0, _expect2.default)(assertion).toThrow(/value/);
    });

    it('shows a diff if the value is unspecified', function () {
      try {
        (0, _expect2.default)(element).toNotHaveProp('value');
        throw new Error('Made it past');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/past/);
        (0, _expect2.default)(error.actual).toEqual({ value: 'offline' });
        (0, _expect2.default)(error.expected).toEqual({ value: undefined });
      }
    });
  });

  describe('toHaveClass()', function () {
    var element = (0, _enzyme.shallow)(_react2.default.createElement('div', { className: 'class-one classTwo class_three' }));

    it('throws if actual is not an enzyme wrapper', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(5).toHaveClass('class-name');
      };

      (0, _expect2.default)(assertion).toThrow(/enzyme/i);
    });

    it('throws if the class name does not exist', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveClass('class-four');
      };

      (0, _expect2.default)(assertion).toThrow(/class-four/);
    });

    it('does not throw if the class name exists', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveClass('class-one');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('returns the assertion', function () {
      var expectation = (0, _expect2.default)(element);
      var result = expectation.toHaveClass('classTwo');

      (0, _expect2.default)(result).toBe(expectation);
    });

    it('shows the diff', function () {
      try {
        (0, _expect2.default)(element).toHaveClass('some-class');
        throw new Error('Should have thrown');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/thrown/);
        (0, _expect2.default)(error.actual).toEqual(element.prop('className').split(' '));
        (0, _expect2.default)(error.expected).toEqual(['some-class'].concat(_toConsumableArray(element.prop('className').split(' '))));
      }
    });

    it('shows a diff when the className is undefined', function () {
      var element = (0, _enzyme.shallow)(_react2.default.createElement('div', null));

      try {
        (0, _expect2.default)(element).toHaveClass('non-existent-class');
        throw new Error('Should have thrown');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/(thrown|split)/);
        (0, _expect2.default)(error.actual).toEqual([]);
        (0, _expect2.default)(error.expected).toEqual(['non-existent-class']);
      }
    });
  });

  describe('toNotHaveClass()', function () {
    var element = (0, _enzyme.shallow)(_react2.default.createElement('div', { className: 'profile' }));

    it('throws if the class is contained', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveClass('profile');
      };

      (0, _expect2.default)(assertion).toThrow(/profile/);
    });

    it('does not throw if the class is missing', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveClass('elvis');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('shows the diff', function () {
      var element = (0, _enzyme.shallow)(_react2.default.createElement('div', { className: 'profile potato' }));
      try {
        (0, _expect2.default)(element).toNotHaveClass('potato');
        throw new Error('Should have thrown.');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/thrown/);
        (0, _expect2.default)(error.actual).toEqual(['profile', 'potato']);
        (0, _expect2.default)(error.expected).toEqual(['profile']);
      }
    });
  });

  describe('toHaveState()', function () {
    // Must be a stateful component.
    var Element = function (_React$Component) {
      _inherits(Element, _React$Component);

      function Element() {
        _classCallCheck(this, Element);

        var _this = _possibleConstructorReturn(this, (Element.__proto__ || Object.getPrototypeOf(Element)).call(this));

        _this.state = {};
        return _this;
      }

      _createClass(Element, [{
        key: 'render',
        value: function render() {
          return _react2.default.createElement('div', null);
        }
      }]);

      return Element;
    }(_react2.default.Component);

    var element = (0, _enzyme.shallow)(_react2.default.createElement(Element, null));

    it('throws if the given value is not an enzyme wrapper', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)('potatoes').toHaveState({});
      };

      (0, _expect2.default)(assertion).toThrow(/enzyme/i);
    });

    it('does not throw if the state matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveState({});
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if an object is not given', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveState();
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('throws if a state does not exist', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveState({
          count: 1
        });
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('throws if the state does not match', function () {
      element.setState({ count: 1 });
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveState({
          count: 5
        });
      };

      (0, _expect2.default)(assertion).toThrow(/5/);
    });

    it('does not throw if the state is deeply equal', function () {
      element.setState({ value: { isNested: true } });
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveState({
          value: { isNested: true }
        });
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('returns the expectation', function () {
      var expectation = (0, _expect2.default)(element);
      var result = expectation.toHaveState({});

      (0, _expect2.default)(result).toBe(expectation);
    });

    it('shows the diff', function () {
      var expected = { clicks: 10 };
      element.setState({ clicks: 48 });

      try {
        (0, _expect2.default)(element).toHaveState(expected);
        throw new Error('Should not throw');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/should/);
        (0, _expect2.default)(error.actual).toEqual(element.state('clicks'));
        (0, _expect2.default)(error.expected).toBe(expected.clicks);
      }
    });
  });

  describe('toHaveRendered()', function () {
    var clickHandler = (0, _expect.createSpy)();
    var element = (0, _enzyme.shallow)(_react2.default.createElement('footer', { onClick: clickHandler }));

    it('does not throw if the output matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(_react2.default.createElement('footer', { onClick: clickHandler }));
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if the output is different', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(_react2.default.createElement('div', null));
      };

      (0, _expect2.default)(assertion).toThrow(/div/i);
    });

    it('does not throw if props are equal', function () {
      var object = {};
      var element = (0, _enzyme.shallow)(_react2.default.createElement('div', { style: object }));
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(_react2.default.createElement('div', { style: {} }));
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if props are different', function () {
      var style = { color: 'blue' };
      var element = (0, _enzyme.shallow)(_react2.default.createElement('div', { style: style }));
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(_react2.default.createElement('div', { style: { color: 'red' } }));
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('does not attempt to stringify non-elements', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(null);
      };

      (0, _expect2.default)(assertion).toThrow(/element/).toThrow(/null/);
    });

    it('does not throw if both outputs are null', function () {
      var Element = function Element() {
        return null;
      };
      var element = (0, _enzyme.shallow)(_react2.default.createElement(Element, null));
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(null);
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('indents the block if the element has props', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(_react2.default.createElement('button', { value: 'a value' }));
      };

      (0, _expect2.default)(assertion).toThrow(/\n/);
    });

    it('does not indent if the value is primitive', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(null);
      };

      (0, _expect2.default)(assertion).toNotThrow(/\n/);
    });

    it('does not indent if the element has no props', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(_react2.default.createElement('div', null));
      };

      (0, _expect2.default)(assertion).toNotThrow(/\n/);
    });

    it('show a colon if split onto another line', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(_react2.default.createElement('button', { disabled: true }));
      };

      (0, _expect2.default)(assertion).toThrow(/:/);
    });

    it('does not show a colon if on one line', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered(null);
      };

      (0, _expect2.default)(assertion).toNotThrow(/:/);
    });

    it('throws if the element does not exist', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element.find('aside')).toHaveRendered(_react2.default.createElement('div', null));
      };

      (0, _expect2.default)(assertion).toThrow(/render/i);
    });

    it('throws if the element does not exist with no matcher', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element.find('bacon')).toHaveRendered();
      };

      (0, _expect2.default)(assertion).toThrow(/render/i);
    });

    it('does not throw if no elements were provided', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered();
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if the value is null when no matcher was given', function () {
      var Component = function Component() {
        return null;
      };
      var element = (0, _enzyme.shallow)(_react2.default.createElement(Component, null));
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveRendered();
      };

      (0, _expect2.default)(assertion).toThrow(/render/i);
    });
  });

  describe('toNotHaveRendered()', function () {
    var element = (0, _enzyme.shallow)(_react2.default.createElement('button', { disabled: true, value: 'Click me' }));

    it('throws if the value matches', function () {
      var Element = function Element() {
        return null;
      };
      var element = (0, _enzyme.shallow)(_react2.default.createElement(Element, null));
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveRendered(null);
      };

      (0, _expect2.default)(assertion).toThrow(/element/);
    });

    it('does not throw if the value is different', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveRendered(null);
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if all props match', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveRendered(_react2.default.createElement('button', { disabled: true, value: 'Click me' }));
      };

      (0, _expect2.default)(assertion).toThrow(/equal/i);
    });

    // If the user didn't expect it to exist, they wouldn't
    // have passed an element to match against.
    it('throws if the element does not exist', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element.find('bacon')).toNotHaveRendered(_react2.default.createElement('div', null));
      };

      (0, _expect2.default)(assertion).toThrow(/exist/);
    });

    it('passes if the element does not exist but has no matcher', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element.find('bacon')).toNotHaveRendered();
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('fails if the element rendered something with no matcher', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveRendered();
      };

      (0, _expect2.default)(assertion).toThrow(/render/i);
    });
  });

  describe('toNotHaveState()', function () {
    var Element = function (_React$Component2) {
      _inherits(Element, _React$Component2);

      function Element() {
        _classCallCheck(this, Element);

        var _this2 = _possibleConstructorReturn(this, (Element.__proto__ || Object.getPrototypeOf(Element)).call(this));

        _this2.state = {
          hovering: false,
          theme: 'dark'
        };
        return _this2;
      }

      _createClass(Element, [{
        key: 'render',
        value: function render() {
          return _react2.default.createElement('div', null);
        }
      }]);

      return Element;
    }(_react2.default.Component);

    var element = (0, _enzyme.shallow)(_react2.default.createElement(Element, null));

    it('passes if the state is different', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveState({
          missing: 'property',
          hovering: true
        });
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if any state matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveState({
          hovering: false,
          theme: 'light'
        });
      };

      (0, _expect2.default)(assertion).toThrow(/state/);
    });

    it('shows a diff', function () {
      var expected = { clicks: 48 };
      element.setState(expected);

      try {
        (0, _expect2.default)(element).toNotHaveState(expected);
        throw new Error('Should not survive');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/should/);
        (0, _expect2.default)(error.actual).toEqual(element.state('clicks'));
        (0, _expect2.default)(error.expected).toBe(expected.clicks);
      }
    });
  });

  describe('toHaveStyle()', function () {
    var style = { color: 'blue', transition: 'color 1s' };
    var element = (0, _enzyme.shallow)(_react2.default.createElement('div', { style: style }));

    it('throws if not given an enzyme wrapper', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(5).toHaveStyle('color', 'red');
      };

      (0, _expect2.default)(assertion).toThrow(/enzyme/);
    });

    it('throws if the component does not contain the style', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveStyle('translate');
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('does not throw if the property exists and no value is asserted', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveStyle('color');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if the value given does not match', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveStyle('color', 'beige');
      };

      (0, _expect2.default)(assertion).toThrow(/beige/);
    });

    it('does not throw if the given value matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveStyle('color', 'blue');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('accepts an object of styles', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveStyle({ color: 'blue' });
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if any style rule differs', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveStyle({
          display: 'none',
          color: 'blue'
        });
      };

      (0, _expect2.default)(assertion).toThrow(/style|css/i);
    });

    it('does not throw if all styles match', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveStyle({
          transition: style.transition,
          color: style.color
        });
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('returns the assertion', function () {
      var expectation = (0, _expect2.default)(element);
      var result = expectation.toHaveStyle('color');

      (0, _expect2.default)(result).toBe(expectation);
    });

    it('shows the diff', function () {
      var expected = { color: 'potato' };
      try {
        (0, _expect2.default)(element).toHaveStyle(expected);
        throw new Error('Should not throw');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/should/);
        (0, _expect2.default)(error.actual).toBe(element.prop('style'));
        (0, _expect2.default)(error.expected).toBe(expected);
      }
    });
  });

  describe('toNotHaveStyle()', function () {
    var element = (0, _enzyme.shallow)(_react2.default.createElement('div', {
      style: {
        color: 'orange'
      }
    }));

    it('passes if the color does not exist', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveStyle('transition');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if the style exists', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveStyle('color');
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('passes if the style is different', function () {
      var expectation = (0, _expect2.default)(element);
      var assertion = function assertion() {
        return expectation.toNotHaveStyle('color', 'crimson');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if the style matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveStyle('color', 'orange');
      };

      (0, _expect2.default)(assertion).toThrow(/color/);
    });

    it('passes if no styles match', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveStyle({
          backgroundColor: 'turquoise',
          color: 'not orange',
          borderWidth: 2
        });
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws if any styles match', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveStyle({
          backgroundColor: 'turquoise',
          color: 'orange'
        });
      };

      (0, _expect2.default)(assertion).toThrow(/color/);
    });

    it('shows a diff', function () {
      var expected = { color: 'orange' };

      try {
        (0, _expect2.default)(element).toNotHaveStyle(expected);
        throw new Error('Inadvertantly passed.');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/passed/);
        (0, _expect2.default)(error.actual).toBe(element.prop('style'));
        (0, _expect2.default)(error.expected).toBe(expected);
      }
    });
  });

  describe('toHaveContext()', function () {
    var Component = function (_React$Component3) {
      _inherits(Component, _React$Component3);

      function Component() {
        _classCallCheck(this, Component);

        return _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).apply(this, arguments));
      }

      _createClass(Component, [{
        key: 'render',
        value: function render() {
          return null;
        }
      }]);

      return Component;
    }(_react2.default.Component);

    // React requires this to be specified, or context won't work.


    Component.contextTypes = {
      data: _propTypes2.default.string
    };

    var element = (0, _enzyme.shallow)(_react2.default.createElement(Component, null), {
      context: { data: 'probably' }
    });

    it('returns the assertion', function () {
      var expectation = (0, _expect2.default)(element);
      var result = expectation.toHaveContext({});

      (0, _expect2.default)(result).toBe(expectation);
    });

    it('throws if actual is not an enzyme type', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)('nope').toHaveContext({});
      };

      (0, _expect2.default)(assertion).toThrow(/enzyme/);
    });

    it('throws when the context does not match', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveContext({
          propertyExists: false
        });
      };

      (0, _expect2.default)(assertion).toThrow(/context/);
    });

    it('does not throw when the context matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveContext({
          data: 'probably'
        });
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('shows the expected object for error messages', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toHaveContext({
          data: { stringify: 'me' }
        });
      };

      (0, _expect2.default)(assertion).toNotThrow(/object Object/);
      (0, _expect2.default)(assertion).toThrow(/stringify.*?me/);
    });

    it('shows a diff', function () {
      var expected = { data: 'different' };

      try {
        (0, _expect2.default)(element).toHaveContext(expected);
        throw new Error('Inadvertantly passed.');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/passed/);
        (0, _expect2.default)(error.actual).toBe(element.context('data'));
        (0, _expect2.default)(error.expected).toBe(expected.data);
      }
    });
  });

  describe('toNotHaveContext()', function () {
    var Component = function (_React$Component4) {
      _inherits(Component, _React$Component4);

      function Component() {
        _classCallCheck(this, Component);

        return _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).apply(this, arguments));
      }

      _createClass(Component, [{
        key: 'render',
        value: function render() {
          return null;
        }
      }]);

      return Component;
    }(_react2.default.Component);

    // React requires this to be specified, or context won't work.


    Component.contextTypes = {
      string: _propTypes2.default.string
    };

    var element = (0, _enzyme.shallow)(_react2.default.createElement(Component, null), {
      context: { string: 'a tiny context variable' }
    });

    it('passes if the context is not contained', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveContext({
          missing: 'not defined in the context types'
        });
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('fails if the context type matches', function () {
      var _element$context = element.context(),
          string = _element$context.string;

      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotHaveContext({
          string: string
        });
      };

      (0, _expect2.default)(assertion).toThrow(/context/);
    });

    it('shows the diff', function () {
      var expected = { string: element.context('string') };

      try {
        (0, _expect2.default)(element).toNotHaveContext(expected);
        throw new Error('Inadvertantly passed.');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/passed/);
        (0, _expect2.default)(error.actual).toBe(element.context('string'));
        (0, _expect2.default)(error.expected).toBe(expected.string);
      }
    });
  });

  describe('toContain()', function () {
    var Component = function Component() {
      return _react2.default.createElement('div', null);
    };
    var element = (0, _enzyme.shallow)(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement('article', null),
      _react2.default.createElement('aside', null),
      _react2.default.createElement('aside', null),
      _react2.default.createElement(Component, { enabled: true, className: 'component' })
    ));

    it('only affects enzyme types', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)('hello world').toContain('hello');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)([1, 2, 3]).toContain(3);
      }).toNotThrow();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)({}).toContain({ key: 'value' });
      }).toThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)([1, 2, 3]).toContain(4);
      }).toThrow();
    });

    it('throws if the value does not exist', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toContain('SomeComponent');
      };

      (0, _expect2.default)(assertion).toThrow(/SomeComponent/);
    });

    it('does not throw if the selector is found', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toContain('article');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('does not throw if many matches are found', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toContain('aside');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('works with advanced enzyme selectors', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toContain(Component);
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toContain('.component');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toContain({ enabled: true });
      }).toNotThrow();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toContain({ enabled: false });
      }).toThrow();
    });
  });

  describe('toNotContain()', function () {
    var Component = function Component() {
      return _react2.default.createElement('div', null);
    };
    var element = (0, _enzyme.shallow)(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement('article', null),
      _react2.default.createElement('aside', null),
      _react2.default.createElement('aside', null),
      _react2.default.createElement(Component, { enabled: true, className: 'component' })
    ));

    it('only affects enzyme types', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)('hello').toNotContain('lettuce');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)([1, 2, 3]).toNotContain(60);
      }).toNotThrow();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)('hello world').toNotContain('world');
      }).toThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)([1, 2, 3]).toNotContain(1);
      }).toThrow();
    });

    it('throws if the selector is found', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotContain('article');
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('does not throw if the selector cannot be found', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotContain('section');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });
  });

  describe('toBeA()', function () {
    var createElement = function createElement(type) {
      return (0, _enzyme.shallow)(_react2.default.createElement(type));
    };
    var Child = function Child() {
      return _react2.default.createElement(
        'div',
        null,
        'Nested component'
      );
    };
    var Composite = function Composite() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(Child, null)
      );
    };
    var element = createElement(Composite);

    it('passes control if actual is not an enzyme wrapper', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(5).toBeA('string');
      }).toThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)('hello world').toBeA(Function);
      }).toThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(Symbol('weirder case')).toBeA('number');
      }).toThrow();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)(10).toBeA('number');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)('hello world').toBeA('string');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(function () {}).toBeA(Function);
      }).toNotThrow();
    });

    it('asserts the type when actual is a wrapper', function () {
      var assertion = void 0;

      assertion = function assertion() {
        return (0, _expect2.default)(createElement('div')).toBeA('div');
      };
      (0, _expect2.default)(assertion).toNotThrow();

      assertion = function assertion() {
        return (0, _expect2.default)(createElement('ul')).toBeA('li');
      };
      (0, _expect2.default)(assertion).toThrow(/Expected ul to be a li/i);
    });

    it('returns the expectation', function () {
      var expectation = (0, _expect2.default)(createElement('div'));
      var result = expectation.toBeA('div');

      (0, _expect2.default)(result).toBe(expectation);
    });

    it('throws if the component selector does not match', function () {
      var child = element.find('Child');

      (0, _expect2.default)(function () {
        return (0, _expect2.default)(child).toBeA('Potato');
      }).toThrow(/Child/i);
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(child).toBeA(Composite);
      }).toThrow(/Child/i);
    });

    it('does not throw if the component selector matches', function () {
      var child = element.find('Child');

      var assertion = function assertion() {
        (0, _expect2.default)(child).toBeA(Child);
        (0, _expect2.default)(child).toBeA('Child');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('throws a diff', function () {
      try {
        (0, _expect2.default)(element).toBeA('section');
        throw new Error('Should have thrown an error');
      } catch (error) {
        (0, _expect2.default)(error.expected).toBe('section');
        (0, _expect2.default)(error.actual).toBe('div');
      }
    });
  });

  describe('toBeAn()', function () {
    var element = (0, _enzyme.shallow)(_react2.default.createElement('aside', null));

    it('throws the correct grammar article form', function () {
      var element = (0, _enzyme.shallow)(_react2.default.createElement('section', null));
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toBeAn('aside');
      };

      (0, _expect2.default)(assertion).toThrow(/an/);
    });

    it('passes through if actual is not an enzyme wrapper', function () {
      // I just needed something that worked with the "an" article.
      var error = new Error();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)([]).toBeAn(Array);
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(error).toBeAn(Error);
      }).toNotThrow();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)([]).toBeAn(Error);
      }).toThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(error).toBeAn(Array);
      }).toThrow();
    });

    it('does not throw if the type matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toBeAn('aside');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('returns the correct context', function () {
      var expectation = (0, _expect2.default)(element);
      var result = expectation.toBeAn('aside');

      (0, _expect2.default)(result).toBe(expectation);
    });
  });

  describe('toNotBeA()', function () {
    var element = (0, _enzyme.shallow)(_react2.default.createElement('header', null));

    it('throws if the type matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotBeA('header');
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('does not throw if the type does not match', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotBeA('div');
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('only operates on enzyme values', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)('value').toNotBeA('function');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)('value').toNotBeA('number');
      }).toNotThrow();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)('value').toNotBeA('string');
      }).toThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(9001).toNotBeA('number');
      }).toThrow();
    });

    it('works with components', function () {
      var Component = function Component() {
        return _react2.default.createElement('div', null);
      };
      var element = (0, _enzyme.shallow)(_react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(Component, null)
      ));
      var component = element.find('Component');

      (0, _expect2.default)(function () {
        return (0, _expect2.default)(component).toNotBeA(Component);
      }).toThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toNotBeA(Component);
      }).toNotThrow();
    });

    it('shows a diff', function () {
      try {
        (0, _expect2.default)(element).toNotBeA('header');
        throw new Error('Should have thrown.');
      } catch (error) {
        (0, _expect2.default)(error.message).toNotMatch(/thrown/);
        (0, _expect2.default)(error.actual).toBe('header');
        (0, _expect2.default)(error.expected).toBe('header');
      }
    });
  });

  describe('toNotBeAn()', function () {
    var Item = function Item() {
      return _react2.default.createElement('div', null);
    };
    var element = (0, _enzyme.shallow)(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(Item, null)
    ));
    var item = element.find('Item');

    it('throws if the type matches', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(item).toNotBeAn(Item);
      };

      // Correct grammar usage.
      (0, _expect2.default)(assertion).toThrow(/an/i);
    });

    it('does not throw if the type is different', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotBeAn(Item);
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });
  });

  describe('toExist()', function () {
    var element = void 0;
    beforeEach(function () {
      element = (0, _enzyme.shallow)(_react2.default.createElement('div', null));
    });

    it('only operates on enzyme values', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)('stuff').toExist();
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)({}).toExist();
      }).toNotThrow();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)(undefined).toExist();
      }).toThrow();
    });

    it('throws if the element does not exist', function () {
      var noSuchElement = element.find('NoSuchElement');
      var assertion = function assertion() {
        return (0, _expect2.default)(noSuchElement).toExist();
      };

      (0, _expect2.default)(assertion).toThrow();
    });

    it('does not throw if the element does exist', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toExist();
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('works in older versions of enzyme', function () {
      element.exists = null;
      var nope = element.find('Nope');

      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toExist();
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(nope).toExist();
      }).toThrow();
    });
  });

  describe('toNotExist()', function () {
    var element = void 0;
    beforeEach(function () {
      element = (0, _enzyme.shallow)(_react2.default.createElement('div', null));
    });

    it('should only affect enzyme types', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(undefined).toNotExist();
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(false).toNotExist();
      }).toNotThrow();

      (0, _expect2.default)(function () {
        return (0, _expect2.default)(true).toNotExist();
      }).toThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)('value').toNotExist();
      }).toThrow();
    });

    it('throws if the element exists', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element).toNotExist();
      };

      (0, _expect2.default)(assertion).toThrow(/not exist/);
    });

    it('does not throw if the element does not exist', function () {
      var assertion = function assertion() {
        return (0, _expect2.default)(element.find('Elvis')).toNotExist();
      };

      (0, _expect2.default)(assertion).toNotThrow();
    });

    it('works in older versions of enzyme', function () {
      var absent = element.find('Potato');
      element.exists = null;
      absent.exists = null;

      (0, _expect2.default)(function () {
        return (0, _expect2.default)(absent).toNotExist();
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toNotExist();
      }).toThrow();
    });

    it('only negates the given assertion', function () {
      var expectation = (0, _expect2.default)(element);
      var assertion = function assertion() {
        return expectation.toNotExist();
      };

      (0, _expect2.default)(assertion).toThrow();

      // Asserts the negation flag was removed before throwing.
      (0, _expect2.default)(function () {
        return expectation.toExist();
      }).toNotThrow();
    });
  });

  // Not all methods are tested with `enzyme.mount`,
  // though enough to ensure nothing is terribly wrong.
  describe('mounted wrapper', function () {
    var element = (0, _enzyme.mount)(_react2.default.createElement('audio', { className: 'playing', controls: true }));

    it('works with "toBeA"', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toBeAn('audio');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toBeA('section');
      }).toThrow();
    });

    it('works with "toHaveClass"', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toHaveClass('playing');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toHaveClass('naaaaah');
      }).toThrow();
    });

    it('works with "toHaveProp"', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toHaveProp('controls');
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toHaveProp('bools');
      }).toThrow();
    });

    it('works with "toExist"', function () {
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element).toExist();
      }).toNotThrow();
      (0, _expect2.default)(function () {
        return (0, _expect2.default)(element.find('Yeti')).toExist();
      }).toThrow();
    });
  });
});
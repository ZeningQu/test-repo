'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* eslint-disable no-confusing-arrow */


exports.default = stringify;

var _reactDisplayName = require('react-display-name');

var _reactDisplayName2 = _interopRequireDefault(_reactDisplayName);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Turns nearly any value into a developer-friendly string.
 * @param  {Object} props - Props object.
 * @param  {String} key - Value index.
 * @return {Primitive} - A primitive value, often a string.
 */
var toPrimitive = function toPrimitive(props, key) {
  var value = props[key];

  // Get function names.
  if (typeof value === 'function') {
    return value.name || 'fn';
  }

  // Symbols require explicit string coercion.
  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol' || value instanceof RegExp) {
    return String(value);
  }

  // Prettify react components.
  if (_react2.default.isValidElement(value)) {
    return '<' + (0, _reactDisplayName2.default)(value.type) + '>';
  }

  // Abbreviate arrays and objects.
  if (value instanceof Array) {
    return 'Array[' + value.length + ']';
  }

  // Show object subclass names.
  if (value instanceof Object && value.constructor !== Object) {
    var type = value.constructor.name || 'Object';
    return type + ' {...}';
  }

  // Abbreviate using the number of object keys.
  if (value instanceof Object) {
    var keys = Object.keys(value).length;
    return keys ? 'Object[' + keys + ']' : 'Object[empty]';
  }

  return value;
};

/**
 * Turns a props object into an html-style attribute string.
 * @param  {Object} props - Attributes.
 * @return {String} - html-style attributes.
 */
var stringifyProps = function stringifyProps(props) {
  return Object.keys(props).reduce(function (string, key) {
    if (key === 'children') {
      return string;
    }

    var value = toPrimitive(props, key);
    var shouldUseBraces = typeof props[key] !== 'string';
    var open = shouldUseBraces ? '{' : '"';
    var close = shouldUseBraces ? '}' : '"';

    var keyValuePair = value === true ? key : key + '=' + open + value + close;

    return string + ' ' + keyValuePair;
  }, '');
};

/**
 * Turns any children set into a screen-space friendly string.
 * @param  {ReactElement} element - Any react element.
 * @param  {String} propsString - The stringified element props.
 * @return {String} - Space-friendly string representation of the children.
 */
var stringifyChildren = function stringifyChildren(element, propsString) {
  var children = _react.Children.toArray(element.props.children);

  // Assume all non-objects are primitive.
  var primitives = children.filter(function (child) {
    return (typeof child === 'undefined' ? 'undefined' : _typeof(child)) !== 'object' || child === null;
  });

  var spaceRemains = propsString.length < 20;
  var isPrimitive = children.length === primitives.length;
  var content = primitives.join('');

  // Find the furthest-most space character while being
  // no more than 25 characters in.
  var truncatePoint = content.split('').map(function (char, index) {
    return { char: char, index: index };
  }).filter(function (entry) {
    return entry.char === ' ';
  }).reduce(function (max, _ref) {
    var index = _ref.index;
    return index > 25 ? max : index;
  }, 0);

  var visibleContent = content.length > 25 ? content.slice(0, truncatePoint) + '...' : content;

  // Hide children if there isn't enough space left.
  // somewhat guesswork involved.
  return isPrimitive && spaceRemains ? visibleContent : '...';
};

/**
 * Turns an element into a string. Different from
 * `react-element-to-jsx-string` and `jsx-to-string`
 * since it renders on a single line (optimized for error messages).
 * Non-recursive, children are excluded.
 * @param  {ReactElement} element - Any react element.
 * @return {String} - A string representing the element.
 */
function stringify(element) {
  var type = (0, _reactDisplayName2.default)(element.type);
  var props = stringifyProps(element.props);
  var hasChildren = _react.Children.count(element.props.children) > 0;
  var children = stringifyChildren(element, props);
  var end = hasChildren ? '>' + children + '</' + type + '>' : ' />';

  return '<' + type + props + end;
}
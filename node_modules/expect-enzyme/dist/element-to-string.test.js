'use strict';

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elementToString = require('./element-to-string');

var _elementToString2 = _interopRequireDefault(_elementToString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /* eslint-disable require-jsdoc */


describe('Element to string', function () {
  it('shows the element type', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('section', null));

    (0, _expect2.default)(string).toBe('<section />');
  });

  it('shows component names', function () {
    var Potato = function Potato() {
      return _react2.default.createElement('div', null);
    };
    var string = (0, _elementToString2.default)(_react2.default.createElement(Potato, null));

    (0, _expect2.default)(string).toBe('<Potato />');
  });

  it('shows attribute values', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('input', { value: 'text' }));

    (0, _expect2.default)(string).toBe('<input value="text" />');
  });

  it('truncates truthy boolean attributes', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('button', { disabled: true }));

    (0, _expect2.default)(string).toBe('<button disabled />');
  });

  it('spaces attributes correctly', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('input', { value: '', disabled: true }));

    (0, _expect2.default)(string).toBe('<input value="" disabled />');
  });

  it('shows expressions through braces', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('div', { things: 4 }));

    (0, _expect2.default)(string).toBe('<div things={4} />');
  });

  it('shows false values with braces', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('button', { disabled: false }));

    (0, _expect2.default)(string).toBe('<button disabled={false} />');
  });

  // This stringifier is about approximation, not exact precision.
  it('indicates there were children passed', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement(
      'div',
      null,
      _react2.default.createElement('span', null)
    ));

    (0, _expect2.default)(string).toBe('<div>...</div>');
  });

  it('shows function names', function () {
    function handleClick() {}
    var string = (0, _elementToString2.default)(_react2.default.createElement('button', { onClick: handleClick }));

    (0, _expect2.default)(string).toBe('<button onClick={handleClick} />');
  });

  it('assigns a default function name', function () {
    // Comma operator to avoid JavaScript's function name inference.
    var fn = (0, function () {});
    var string = (0, _elementToString2.default)(_react2.default.createElement('button', { onClick: fn }));

    (0, _expect2.default)(string).toBe('<button onClick={fn} />');
  });

  it('abbreviates arrays', function () {
    var list = Array(150).fill(5);
    var string = (0, _elementToString2.default)(_react2.default.createElement('div', { list: list }));

    (0, _expect2.default)(string).toBe('<div list={Array[150]} />');
  });

  it('abbreviates objects', function () {
    var object = Array(100).fill().map(function (value, index) {
      return index + 1;
    }).reduce(function (obj, index) {
      obj[index] = index;
      return obj;
    }, {});

    var string = (0, _elementToString2.default)(_react2.default.createElement('div', { object: object }));

    (0, _expect2.default)(string).toBe('<div object={Object[100]} />');
  });

  it('shows empty objects', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('div', { style: {} }));

    (0, _expect2.default)(string).toBe('<div style={Object[empty]} />');
  });

  it('shows null values', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('div', { onClick: null }));

    (0, _expect2.default)(string).toBe('<div onClick={null} />');
  });

  it('shows symbols', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement('div', { onClick: Symbol('description') }));

    (0, _expect2.default)(string).toBe('<div onClick={Symbol(description)} />');
  });

  it('shows regex values', function () {
    var regex = /hey steve/;
    var string = (0, _elementToString2.default)(_react2.default.createElement('li', { search: regex }));

    (0, _expect2.default)(string).toBe('<li search={/hey steve/} />');
  });

  it('shows the constructor name if not an object', function () {
    var Potato = function Potato() {
      _classCallCheck(this, Potato);
    };

    var string = (0, _elementToString2.default)(_react2.default.createElement('div', { value: new Potato() }));

    (0, _expect2.default)(string).toBe('<div value={Potato {...}} />');
  });

  it('shows react element names', function () {
    var Potato = function Potato() {
      return _react2.default.createElement('div', null);
    };
    var string = (0, _elementToString2.default)(_react2.default.createElement('div', { value: _react2.default.createElement(Potato, null) }));

    (0, _expect2.default)(string).toBe('<div value={<Potato>} />');
  });

  it('shows children if there are no other props', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement(
      'button',
      null,
      'Buy now'
    ));

    (0, _expect2.default)(string).toBe('<button>Buy now</button>');
  });

  it('shows primitive children', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement(
      'div',
      null,
      'Clicked ',
      4,
      ' times'
    ));

    (0, _expect2.default)(string).toBe('<div>Clicked 4 times</div>');
  });

  it('hides children if any are complex', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement(
      'div',
      null,
      'Text but then ',
      _react2.default.createElement('i', null),
      ' and more text later'
    ));

    (0, _expect2.default)(string).toBe('<div>...</div>');
  });

  it('hides children if props take up too much space', function () {
    var string1 = (0, _elementToString2.default)(_react2.default.createElement(
      'button',
      { disabled: true },
      'content'
    ));
    var string2 = (0, _elementToString2.default)(_react2.default.createElement(
      'button',
      { disabled: true, enabled: true },
      'content'
    ));
    var string3 = (0, _elementToString2.default)(_react2.default.createElement(
      'button',
      { potato: true, disabled: true, enabled: true },
      'content'
    ));

    (0, _expect2.default)(string1).toBe('<button disabled>content</button>');
    (0, _expect2.default)(string2).toBe('<button disabled enabled>content</button>');
    (0, _expect2.default)(string3).toBe('<button potato disabled enabled>...</button>');
  });

  it('shows an ellipsis if text is too long', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement(
      'div',
      null,
      'Hey check it out this is a string but with like a huge amount of text why would anyone write this much I sure have no idea. #regrets'
    ));

    (0, _expect2.default)(string).toBe('<div>Hey check it out this is...</div>');
  });

  it('does not show an ellipsis if text fits perfectly', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement(
      'div',
      null,
      'Exactly 25 letters long!!'
    ));

    (0, _expect2.default)(string).toBe('<div>Exactly 25 letters long!!</div>');
  });

  it('truncates children at a good breaking point', function () {
    var string = (0, _elementToString2.default)(_react2.default.createElement(
      'div',
      null,
      'Exactly 25 characterslongloljustkidding'
    ));

    (0, _expect2.default)(string).toBe('<div>Exactly 25...</div>');
  });

  it('works', function () {
    var Element = function Element() {
      return _react2.default.createElement('div', null);
    };
    function onAction() {}
    var string = (0, _elementToString2.default)(_react2.default.createElement(
      Element,
      {
        onAction: onAction,
        enabled: true,
        disabled: false,
        string: 'value',
        style: {}
      },
      _react2.default.createElement(
        'section',
        null,
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'ol',
            null,
            _react2.default.createElement('li', null),
            _react2.default.createElement('li', null),
            _react2.default.createElement('li', null)
          )
        )
      )
    ));

    (0, _expect2.default)(string).toBe('<Element onAction={onAction} enabled disabled={false} ' + 'string="value" style={Object[empty]}>...</Element>');
  });
});
import { Config } from 'vega-lite/build/src/config';
import { Data } from 'vega-lite/build/src/data';
import { Mark } from 'vega-lite/build/src/mark';
import { StackProperties } from 'vega-lite/build/src/stack';
import { WildcardProperty } from '../wildcard';
import { Property } from '../property';
import { TransformQuery } from './transform';
import { EncodingQuery } from './encoding';
import { TopLevel, FacetedCompositeUnitSpec } from 'vega-lite/build/src/spec';
/**
 * This interface follows the same structure as [Vega-Lite](https://github.com/vega/vega-lite)'s `UnitSpec`.
 * The interface name has `Query` suffixes to hint that its instance (which can contain wildcards) is a query that describe a collection of specifications.
 * Most interfaces under `SpecQuery` similarly describe a "query" version of directives in Vega-Lite.
 */
export interface SpecQuery {
    data?: Data;
    mark: WildcardProperty<Mark>;
    transform?: TransformQuery[];
    encodings: EncodingQuery[];
    config?: Config;
}
/**
 * Convert a Vega-Lite's ExtendedUnitSpec into a CompassQL's SpecQuery
 * @param {ExtendedUnitSpec} spec
 * @returns
 */
export declare function fromSpec(spec: TopLevel<FacetedCompositeUnitSpec>): SpecQuery;
export declare function isAggregate(specQ: SpecQuery): boolean;
/**
 * @return the stack offset type for the specQuery
 */
export declare function stack(specQ: SpecQuery): StackProperties & {
    fieldEncQ: EncodingQuery;
    groupByEncQ: EncodingQuery;
};
export declare function hasWildcard(specQ: SpecQuery, opt?: {
    exclude?: Property[];
}): boolean;

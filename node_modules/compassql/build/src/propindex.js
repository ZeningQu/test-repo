"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var property_1 = require("./property");
/**
 * Dictionary that takes property as a key.
 */
var PropIndex = /** @class */ (function () {
    function PropIndex(i) {
        if (i === void 0) { i = null; }
        this.index = i ? __assign({}, i) : {};
    }
    PropIndex.prototype.has = function (p) {
        return property_1.toKey(p) in this.index;
    };
    PropIndex.prototype.get = function (p) {
        return this.index[property_1.toKey(p)];
    };
    PropIndex.prototype.set = function (p, value) {
        this.index[property_1.toKey(p)] = value;
        return this;
    };
    PropIndex.prototype.setByKey = function (key, value) {
        this.index[key] = value;
    };
    PropIndex.prototype.map = function (f) {
        var i = new PropIndex();
        for (var k in this.index) {
            i.index[k] = f(this.index[k]);
        }
        return i;
    };
    PropIndex.prototype.size = function () {
        return util_1.keys(this.index).length;
    };
    PropIndex.prototype.duplicate = function () {
        return new PropIndex(this.index);
    };
    return PropIndex;
}());
exports.PropIndex = PropIndex;
//# sourceMappingURL=propindex.js.map
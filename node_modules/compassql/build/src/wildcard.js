"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var property_1 = require("./property");
var util_1 = require("./util");
var axis_1 = require("vega-lite/build/src/axis");
var channel_1 = require("vega-lite/build/src/channel");
var mark_1 = require("vega-lite/build/src/mark");
var scale_1 = require("vega-lite/build/src/scale");
var legend_1 = require("vega-lite/build/src/legend");
var timeunit_1 = require("vega-lite/build/src/timeunit");
var type_1 = require("vega-lite/build/src/type");
exports.SHORT_WILDCARD = '?';
function isWildcard(prop) {
    return isShortWildcard(prop) || isWildcardDef(prop);
}
exports.isWildcard = isWildcard;
function isShortWildcard(prop) {
    return prop === exports.SHORT_WILDCARD;
}
exports.isShortWildcard = isShortWildcard;
function isWildcardDef(prop) {
    return prop !== undefined && (!!prop.enum || !!prop.name) && !util_1.isArray(prop);
}
exports.isWildcardDef = isWildcardDef;
function initWildcard(prop, defaultName, defaultEnumValues) {
    return util_1.extend({}, {
        name: defaultName,
        enum: defaultEnumValues
    }, prop === exports.SHORT_WILDCARD ? {} : prop);
}
exports.initWildcard = initWildcard;
/**
 * Initial short names from list of full camelCaseNames.
 * For each camelCaseNames, return unique short names based on initial (e.g., `ccn`)
 */
function initNestedPropName(fullNames) {
    var index = {};
    var has = {};
    var _loop_1 = function (fullName) {
        var initialIndices = [0];
        for (var i = 0; i < fullName.length; i++) {
            if (fullName.charAt(i).toUpperCase() === fullName.charAt(i)) {
                initialIndices.push(i);
            }
        }
        var shortName = initialIndices.map(function (i) { return fullName.charAt(i); }).join('').toLowerCase();
        if (!has[shortName]) {
            index[fullName] = shortName;
            has[shortName] = true;
            return "continue";
        }
        // If duplicate, add last character and try again!
        if (initialIndices[initialIndices.length - 1] !== fullName.length - 1) {
            shortName = initialIndices.concat([fullName.length - 1]).map(function (i) { return fullName.charAt(i); }).join('').toLowerCase();
            if (!has[shortName]) {
                index[fullName] = shortName;
                has[shortName] = true;
                return "continue";
            }
        }
        for (var i = 1; !index[fullName]; i++) {
            var shortNameWithNo = shortName + '_' + i;
            if (!has[shortNameWithNo]) {
                index[fullName] = shortNameWithNo;
                has[shortNameWithNo] = true;
                break;
            }
        }
    };
    for (var _i = 0, fullNames_1 = fullNames; _i < fullNames_1.length; _i++) {
        var fullName = fullNames_1[_i];
        _loop_1(fullName);
    }
    return index;
}
exports.DEFAULT_NAME = {
    mark: 'm',
    channel: 'c',
    aggregate: 'a',
    autoCount: '#',
    hasFn: 'h',
    bin: 'b',
    sort: 'so',
    scale: 's',
    axis: 'ax',
    legend: 'l',
    timeUnit: 'tu',
    field: 'f',
    type: 't',
    binProps: {
        maxbins: 'mb',
        min: 'mi',
        max: 'ma',
        base: 'b',
        step: 's',
        steps: 'ss',
        minstep: 'ms',
        divide: 'd'
    },
    sortProps: {
        field: 'f',
        op: 'o',
        order: 'or'
    },
    scaleProps: initNestedPropName(scale_1.SCALE_PROPERTIES),
    axisProps: initNestedPropName(axis_1.AXIS_PROPERTIES),
    legendProps: initNestedPropName(legend_1.LEGEND_PROPERTIES)
};
function getDefaultName(prop) {
    if (property_1.isEncodingNestedProp(prop)) {
        return exports.DEFAULT_NAME[prop.parent] + '-' + exports.DEFAULT_NAME[prop.parent + 'Props'][prop.child];
    }
    if (exports.DEFAULT_NAME[prop]) {
        return exports.DEFAULT_NAME[prop];
    }
    /* istanbul ignore next */
    throw new Error('Default name undefined for ' + prop);
}
exports.getDefaultName = getDefaultName;
var DEFAULT_BOOLEAN_ENUM = [false, true];
var DEFAULT_BIN_PROPS_ENUM = {
    maxbins: [5, 10, 20],
    extent: [undefined],
    base: [10],
    step: [undefined],
    steps: [undefined],
    minstep: [undefined],
    divide: [[5, 2]]
};
var DEFAULT_SORT_PROPS = {
    field: [undefined],
    op: ['min', 'mean'],
    order: ['ascending', 'descending']
};
var DEFAULT_SCALE_PROPS_ENUM = {
    type: [undefined, scale_1.ScaleType.LOG],
    domain: [undefined],
    base: [undefined],
    exponent: [1, 2],
    clamp: DEFAULT_BOOLEAN_ENUM,
    nice: DEFAULT_BOOLEAN_ENUM,
    reverse: DEFAULT_BOOLEAN_ENUM,
    round: DEFAULT_BOOLEAN_ENUM,
    zero: DEFAULT_BOOLEAN_ENUM,
    padding: [undefined],
    paddingInner: [undefined],
    paddingOuter: [undefined],
    interpolate: [undefined],
    range: [undefined],
    rangeStep: [17, 21],
    scheme: [undefined],
};
var DEFAULT_AXIS_PROPS_ENUM = {
    zindex: [1, 0],
    offset: [undefined],
    orient: [undefined],
    values: [undefined],
    domain: DEFAULT_BOOLEAN_ENUM,
    grid: DEFAULT_BOOLEAN_ENUM,
    format: [undefined],
    labels: DEFAULT_BOOLEAN_ENUM,
    labelAngle: [undefined],
    labelOverlap: [undefined],
    labelPadding: [undefined],
    maxExtent: [undefined],
    minExtent: [undefined],
    position: [undefined],
    ticks: DEFAULT_BOOLEAN_ENUM,
    tickCount: [undefined],
    tickSize: [undefined],
    title: [undefined],
    titleMaxLength: [undefined],
    titlePadding: [undefined]
};
var DEFAULT_LEGEND_PROPS_ENUM = {
    entryPadding: [undefined],
    orient: ['left', 'right'],
    offset: [undefined],
    format: [undefined],
    values: [undefined],
    tickCount: [undefined],
    title: [undefined],
    type: [undefined],
    zindex: [undefined]
};
// Use FullEnumIndex to make sure we have all properties specified here!
exports.DEFAULT_ENUM_INDEX = {
    mark: [mark_1.Mark.POINT, mark_1.Mark.BAR, mark_1.Mark.LINE, mark_1.Mark.AREA, mark_1.Mark.TICK, mark_1.Mark.TEXT],
    channel: [channel_1.X, channel_1.Y, channel_1.ROW, channel_1.COLUMN, channel_1.SIZE, channel_1.COLOR],
    aggregate: [undefined, 'mean'],
    autoCount: DEFAULT_BOOLEAN_ENUM,
    bin: DEFAULT_BOOLEAN_ENUM,
    hasFn: DEFAULT_BOOLEAN_ENUM,
    timeUnit: [undefined, timeunit_1.TimeUnit.YEAR, timeunit_1.TimeUnit.MONTH, timeunit_1.TimeUnit.MINUTES, timeunit_1.TimeUnit.SECONDS],
    field: [undefined],
    type: [type_1.Type.NOMINAL, type_1.Type.ORDINAL, type_1.Type.QUANTITATIVE, type_1.Type.TEMPORAL],
    sort: ['ascending', 'descending'],
    scale: [true],
    axis: DEFAULT_BOOLEAN_ENUM,
    legend: DEFAULT_BOOLEAN_ENUM,
    binProps: DEFAULT_BIN_PROPS_ENUM,
    sortProps: DEFAULT_SORT_PROPS,
    scaleProps: DEFAULT_SCALE_PROPS_ENUM,
    axisProps: DEFAULT_AXIS_PROPS_ENUM,
    legendProps: DEFAULT_LEGEND_PROPS_ENUM
};
// TODO: rename this to getDefaultEnum
function getDefaultEnumValues(prop, schema, opt) {
    if (prop === 'field' || (property_1.isEncodingNestedProp(prop) && prop.parent === 'sort' && prop.child === 'field')) {
        // For field, by default enumerate all fields
        return schema.fieldNames();
    }
    var val;
    if (property_1.isEncodingNestedProp(prop)) {
        val = opt.enum[prop.parent + 'Props'][prop.child];
    }
    else {
        val = opt.enum[prop];
    }
    if (val !== undefined) {
        return val;
    }
    /* istanbul ignore next */
    throw new Error('No default enumValues for ' + JSON.stringify(prop));
}
exports.getDefaultEnumValues = getDefaultEnumValues;
//# sourceMappingURL=wildcard.js.map
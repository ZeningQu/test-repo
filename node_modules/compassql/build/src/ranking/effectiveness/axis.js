"use strict";
/**
 * Field Type (with Bin and TimeUnit) and Channel Score (Cleveland / Mackinlay based)
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var channel_1 = require("vega-lite/build/src/channel");
var config_1 = require("../../config");
var type_1 = require("./type");
var base_1 = require("./base");
/**
 * Effectiveness Score for preferred axis.
 */
var AxisScorer = /** @class */ (function (_super) {
    __extends(AxisScorer, _super);
    function AxisScorer() {
        return _super.call(this, 'Axis') || this;
    }
    AxisScorer.prototype.initScore = function (opt) {
        if (opt === void 0) { opt = {}; }
        opt = __assign({}, config_1.DEFAULT_QUERY_CONFIG, opt);
        var score = {};
        var preferredAxes = [{
                feature: type_1.BIN_Q,
                opt: 'preferredBinAxis'
            }, {
                feature: type_1.T,
                opt: 'preferredTemporalAxis'
            }, {
                feature: type_1.TIMEUNIT_T,
                opt: 'preferredTemporalAxis'
            }, {
                feature: type_1.TIMEUNIT_O,
                opt: 'preferredTemporalAxis'
            }, {
                feature: type_1.O,
                opt: 'preferredOrdinalAxis'
            }, {
                feature: type_1.N,
                opt: 'preferredNominalAxis'
            }];
        preferredAxes.forEach(function (pAxis) {
            if (opt[pAxis.opt] === channel_1.Channel.X) {
                // penalize the other axis
                score[pAxis.feature + '_' + channel_1.Channel.Y] = -0.01;
            }
            else if (opt[pAxis.opt] === channel_1.Channel.Y) {
                // penalize the other axis
                score[pAxis.feature + '_' + channel_1.Channel.X] = -0.01;
            }
        });
        return score;
    };
    AxisScorer.prototype.featurize = function (type, channel) {
        return type + '_' + channel;
    };
    AxisScorer.prototype.getScore = function (specM, _, __) {
        var _this = this;
        return specM.getEncodings().reduce(function (features, encQ) {
            var type = type_1.getExtendedType(encQ);
            var feature = _this.featurize(type, encQ.channel);
            var featureScore = _this.getFeatureScore(feature);
            if (featureScore) {
                features.push(featureScore);
            }
            return features;
        }, []);
    };
    return AxisScorer;
}(base_1.Scorer));
exports.AxisScorer = AxisScorer;
//# sourceMappingURL=axis.js.map
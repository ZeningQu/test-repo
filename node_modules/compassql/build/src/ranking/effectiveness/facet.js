"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = require("./base");
var config_1 = require("../../config");
var channel_1 = require("vega-lite/build/src/channel");
/**
 * Effective Score for preferred facet
 */
var FacetScorer = /** @class */ (function (_super) {
    __extends(FacetScorer, _super);
    function FacetScorer() {
        return _super.call(this, 'Facet') || this;
    }
    FacetScorer.prototype.initScore = function (opt) {
        opt = __assign({}, config_1.DEFAULT_QUERY_CONFIG, opt);
        var score = {};
        if (opt.preferredFacet === channel_1.Channel.ROW) {
            // penalize the other axis
            score[channel_1.Channel.COLUMN] = -0.01;
        }
        else if (opt.preferredFacet === channel_1.Channel.COLUMN) {
            // penalize the other axis
            score[channel_1.Channel.ROW] = -0.01;
        }
        return score;
    };
    FacetScorer.prototype.getScore = function (specM, _, __) {
        var _this = this;
        return specM.getEncodings().reduce(function (features, encQ) {
            var featureScore = _this.getFeatureScore(encQ.channel);
            if (featureScore) {
                features.push(featureScore);
            }
            return features;
        }, []);
    };
    return FacetScorer;
}(base_1.Scorer));
exports.FacetScorer = FacetScorer;
;
//# sourceMappingURL=facet.js.map
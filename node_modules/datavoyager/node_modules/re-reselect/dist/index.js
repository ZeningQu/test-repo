(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('Re-reselect', ['exports', 'reselect'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('reselect'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Reselect);
    global.ReReselect = mod.exports;
  }
})(this, function (exports, _reselect) {
  'use strict';

  exports.__esModule = true;
  exports.default = createCachedSelector;
  function createCachedSelector() {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    var cache = {};

    return function (resolver) {
      var createSelectorInstance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _reselect.createSelector;

      var selector = function selector() {
        // Application receives this function
        var cacheKey = resolver.apply(undefined, arguments);

        if (typeof cacheKey === 'string' || typeof cacheKey === 'number') {
          var _cache;

          if (cache[cacheKey] === undefined) {
            cache[cacheKey] = createSelectorInstance.apply(undefined, funcs);
          }
          return (_cache = cache)[cacheKey].apply(_cache, arguments);
        }
        return undefined;
      };

      // Further selector methods
      selector.getMatchingSelector = function () {
        var cacheKey = resolver.apply(undefined, arguments);
        return cache[cacheKey];
      };

      selector.removeMatchingSelector = function () {
        var cacheKey = resolver.apply(undefined, arguments);
        if (cache[cacheKey] !== undefined) {
          cache[cacheKey] = undefined;
        }
      };

      selector.clearCache = function () {
        cache = {};
      };

      selector.resultFunc = funcs[funcs.length - 1];

      return selector;
    };
  }
});
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var log = require("./log");
function _normalizeAutoSize(autosize) {
    return util_1.isString(autosize) ? { type: autosize } : autosize || {};
}
function normalizeAutoSize(topLevelAutosize, configAutosize, isUnitOrLayer) {
    if (isUnitOrLayer === void 0) { isUnitOrLayer = true; }
    var autosize = __assign({ type: 'pad' }, _normalizeAutoSize(configAutosize), _normalizeAutoSize(topLevelAutosize));
    if (autosize.type === 'fit') {
        if (!isUnitOrLayer) {
            log.warn(log.message.FIT_NON_SINGLE);
            autosize.type = 'pad';
        }
    }
    return autosize;
}
exports.normalizeAutoSize = normalizeAutoSize;
var TOP_LEVEL_PROPERTIES = [
    'background', 'padding'
    // We do not include "autosize" here as it is supported by only unit and layer specs and thus need to be normalized
];
function extractTopLevelProperties(t) {
    return TOP_LEVEL_PROPERTIES.reduce(function (o, p) {
        if (t && t[p] !== undefined) {
            o[p] = t[p];
        }
        return o;
    }, {});
}
exports.extractTopLevelProperties = extractTopLevelProperties;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9wbGV2ZWxwcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b3BsZXZlbHByb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSw2QkFBOEI7QUFDOUIsMkJBQTZCO0FBMEQ3Qiw0QkFBNEIsUUFBdUM7SUFDakUsTUFBTSxDQUFDLGVBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7QUFDaEUsQ0FBQztBQUVELDJCQUFrQyxnQkFBK0MsRUFBRSxjQUE2QyxFQUFFLGFBQTZCO0lBQTdCLDhCQUFBLEVBQUEsb0JBQTZCO0lBQzdKLElBQU0sUUFBUSxjQUNaLElBQUksRUFBRSxLQUFLLElBQ1Isa0JBQWtCLENBQUMsY0FBYyxDQUFDLEVBQ2xDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQ3hDLENBQUM7SUFFRixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNyQyxRQUFRLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQWZELDhDQWVDO0FBRUQsSUFBTSxvQkFBb0IsR0FBaUM7SUFDekQsWUFBWSxFQUFFLFNBQVM7SUFDdkIsbUhBQW1IO0NBQ3BILENBQUM7QUFFRixtQ0FBd0UsQ0FBSTtJQUMxRSxNQUFNLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxDQUFDO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNULENBQUM7QUFQRCw4REFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTdHJpbmd9IGZyb20gJ3V0aWwnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4vbG9nJztcblxuLyoqXG4gKiBAbWluaW11bSAwXG4gKi9cbmV4cG9ydCB0eXBlIFBhZGRpbmcgPSBudW1iZXIgfCB7dG9wPzogbnVtYmVyLCBib3R0b20/OiBudW1iZXIsIGxlZnQ/OiBudW1iZXIsIHJpZ2h0PzogbnVtYmVyfTtcblxuZXhwb3J0IGludGVyZmFjZSBUb3BMZXZlbFByb3BlcnRpZXMge1xuICAvKipcbiAgICogQ1NTIGNvbG9yIHByb3BlcnR5IHRvIHVzZSBhcyB0aGUgYmFja2dyb3VuZCBvZiB2aXN1YWxpemF0aW9uLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gbm9uZSAodHJhbnNwYXJlbnQpXG4gICAqL1xuICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2aXN1YWxpemF0aW9uIHBhZGRpbmcsIGluIHBpeGVscywgZnJvbSB0aGUgZWRnZSBvZiB0aGUgdmlzdWFsaXphdGlvbiBjYW52YXMgdG8gdGhlIGRhdGEgcmVjdGFuZ2xlLiAgSWYgYSBudW1iZXIsIHNwZWNpZmllcyBwYWRkaW5nIGZvciBhbGwgc2lkZXMuXG4gICAqIElmIGFuIG9iamVjdCwgdGhlIHZhbHVlIHNob3VsZCBoYXZlIHRoZSBmb3JtYXQgYHtcImxlZnRcIjogNSwgXCJ0b3BcIjogNSwgXCJyaWdodFwiOiA1LCBcImJvdHRvbVwiOiA1fWAgdG8gc3BlY2lmeSBwYWRkaW5nIGZvciBlYWNoIHNpZGUgb2YgdGhlIHZpc3VhbGl6YXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgNWBcbiAgICovXG4gIHBhZGRpbmc/OiBQYWRkaW5nO1xuXG4gIC8qKlxuICAgKiBTZXRzIGhvdyB0aGUgdmlzdWFsaXphdGlvbiBzaXplIHNob3VsZCBiZSBkZXRlcm1pbmVkLiBJZiBhIHN0cmluZywgc2hvdWxkIGJlIG9uZSBvZiBgXCJwYWRcImAsIGBcImZpdFwiYCBvciBgXCJub25lXCJgLlxuICAgKiBPYmplY3QgdmFsdWVzIGNhbiBhZGRpdGlvbmFsbHkgc3BlY2lmeSBwYXJhbWV0ZXJzIGZvciBjb250ZW50IHNpemluZyBhbmQgYXV0b21hdGljIHJlc2l6aW5nLlxuICAgKiBgXCJmaXRcImAgaXMgb25seSBzdXBwb3J0ZWQgZm9yIHNpbmdsZSBhbmQgbGF5ZXJlZCB2aWV3cyB0aGF0IGRvbid0IHVzZSBgcmFuZ2VTdGVwYC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlX186IGBwYWRgXG4gICAqL1xuICBhdXRvc2l6ZT86IEF1dG9zaXplVHlwZSB8IEF1dG9TaXplUGFyYW1zO1xufVxuXG5leHBvcnQgdHlwZSBBdXRvc2l6ZVR5cGUgPSAncGFkJyB8ICdmaXQnIHwgJ25vbmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9TaXplUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBzaXppbmcgZm9ybWF0IHR5cGUuIE9uZSBvZiBgXCJwYWRcImAsIGBcImZpdFwiYCBvciBgXCJub25lXCJgLiBTZWUgdGhlIFthdXRvc2l6ZSB0eXBlXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3NpemUuaHRtbCNhdXRvc2l6ZSkgZG9jdW1lbnRhdGlvbiBmb3IgZGVzY3JpcHRpb25zIG9mIGVhY2guXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgXCJwYWRcImBcbiAgICovXG4gIHR5cGU/OiBBdXRvc2l6ZVR5cGU7XG5cbiAgLyoqXG4gICAqIEEgYm9vbGVhbiBmbGFnIGluZGljYXRpbmcgaWYgYXV0b3NpemUgbGF5b3V0IHNob3VsZCBiZSByZS1jYWxjdWxhdGVkIG9uIGV2ZXJ5IHZpZXcgdXBkYXRlLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWVfXzogYGZhbHNlYFxuICAgKi9cbiAgcmVzaXplPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBob3cgc2l6ZSBjYWxjdWxhdGlvbiBzaG91bGQgYmUgcGVyZm9ybWVkLCBvbmUgb2YgYFwiY29udGVudFwiYCBvciBgXCJwYWRkaW5nXCJgLiBUaGUgZGVmYXVsdCBzZXR0aW5nIChgXCJjb250ZW50XCJgKSBpbnRlcnByZXRzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IHNldHRpbmdzIGFzIHRoZSBkYXRhIHJlY3RhbmdsZSAocGxvdHRpbmcpIGRpbWVuc2lvbnMsIHRvIHdoaWNoIHBhZGRpbmcgaXMgdGhlbiBhZGRlZC4gSW4gY29udHJhc3QsIHRoZSBgXCJwYWRkaW5nXCJgIHNldHRpbmcgaW5jbHVkZXMgdGhlIHBhZGRpbmcgd2l0aGluIHRoZSB2aWV3IHNpemUgY2FsY3VsYXRpb25zLCBzdWNoIHRoYXQgdGhlIHdpZHRoIGFuZCBoZWlnaHQgc2V0dGluZ3MgaW5kaWNhdGUgdGhlICoqdG90YWwqKiBpbnRlbmRlZCBzaXplIG9mIHRoZSB2aWV3LlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWVfXzogYFwiY29udGVudFwiYFxuICAgKi9cbiAgY29udGFpbnM/OiAnY29udGVudCcgfCAncGFkZGluZyc7XG59XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVBdXRvU2l6ZShhdXRvc2l6ZTogQXV0b3NpemVUeXBlIHwgQXV0b1NpemVQYXJhbXMpIHtcbiAgcmV0dXJuIGlzU3RyaW5nKGF1dG9zaXplKSA/IHt0eXBlOiBhdXRvc2l6ZX0gOiBhdXRvc2l6ZSB8fCB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUF1dG9TaXplKHRvcExldmVsQXV0b3NpemU6IEF1dG9zaXplVHlwZSB8IEF1dG9TaXplUGFyYW1zLCBjb25maWdBdXRvc2l6ZTogQXV0b3NpemVUeXBlIHwgQXV0b1NpemVQYXJhbXMsIGlzVW5pdE9yTGF5ZXI6IGJvb2xlYW4gPSB0cnVlKTogQXV0b1NpemVQYXJhbXMge1xuICBjb25zdCBhdXRvc2l6ZTogQXV0b1NpemVQYXJhbXMgPSB7XG4gICAgdHlwZTogJ3BhZCcsXG4gICAgLi4uX25vcm1hbGl6ZUF1dG9TaXplKGNvbmZpZ0F1dG9zaXplKSxcbiAgICAuLi5fbm9ybWFsaXplQXV0b1NpemUodG9wTGV2ZWxBdXRvc2l6ZSlcbiAgfTtcblxuICBpZiAoYXV0b3NpemUudHlwZSA9PT0gJ2ZpdCcpIHtcbiAgICBpZiAoIWlzVW5pdE9yTGF5ZXIpIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLkZJVF9OT05fU0lOR0xFKTtcbiAgICAgIGF1dG9zaXplLnR5cGUgPSAncGFkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXV0b3NpemU7XG59XG5cbmNvbnN0IFRPUF9MRVZFTF9QUk9QRVJUSUVTOiAoa2V5b2YgVG9wTGV2ZWxQcm9wZXJ0aWVzKVtdID0gW1xuICAnYmFja2dyb3VuZCcsICdwYWRkaW5nJ1xuICAvLyBXZSBkbyBub3QgaW5jbHVkZSBcImF1dG9zaXplXCIgaGVyZSBhcyBpdCBpcyBzdXBwb3J0ZWQgYnkgb25seSB1bml0IGFuZCBsYXllciBzcGVjcyBhbmQgdGh1cyBuZWVkIHRvIGJlIG5vcm1hbGl6ZWRcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VG9wTGV2ZWxQcm9wZXJ0aWVzPFQgZXh0ZW5kcyBUb3BMZXZlbFByb3BlcnRpZXM+KHQ6IFQpIHtcbiAgcmV0dXJuIFRPUF9MRVZFTF9QUk9QRVJUSUVTLnJlZHVjZSgobywgcCkgPT4ge1xuICAgIGlmICh0ICYmIHRbcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgb1twXSA9IHRbcF07XG4gICAgfVxuICAgIHJldHVybiBvO1xuICB9LCB7fSk7XG59XG4iXX0=